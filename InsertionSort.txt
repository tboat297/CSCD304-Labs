
Insertion Sort Algorithm

Insertion sort works in the similar way as we sort cards in our hand in a card game.
We assume that the first card is already sorted then, we select an unsorted card. 
If the unsorted card is greater than the card in hand, it is placed on the right otherwise, to the left. 
In the same way, other unsorted cards are taken and put at their right place.


How Insertion Sort Works?

The first element in the array is assumed to be sorted. Take the second element and store it separately in key.
Compare key with the first element. If the first element is greater than key, then key is placed in front of the first elemet.
Now, the first two elements are sorted.
Take the third element and compare it with the elements on the left of it. 
Placed it just behind the element smaller than it. 
If there is no element smaller than it, then place it at the begining of the array.
In a similar way, place every unsorted element at its correct position.


Insertion Sort Pseudocode:

insertionSort(array)
  mark first element as sorted
  for each unsorted element X
    'extract' the element X
    for j <- lastSortedIndex down to 0
      if current element j > X
        move sorted element to the right by 1
    break loop and insert X here
end insertionSort